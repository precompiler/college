/*
 * MainFrame.java
 *
 * Created on 2008年7月24日, 下午2:58
 */

package lee.frame;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import lee.model.MyBlock;
import lee.model.RandomMineGenerator;

/**
 *
 * @author  Owner
 */
public class MainFrame extends javax.swing.JFrame implements ActionListener, MouseListener{
    MyBlock[][] block = null;
    int row = 10, col = 10;
    int num = 15;
    RandomMineGenerator rmg = new RandomMineGenerator(num, row, col);
    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        int x = row;
        int y = col;
        jPanel1.setSize(5*x, 5*y);
        jPanel1.setLayout(new GridLayout(x,y));
        block = rmg.getMineRect();
        for(int i = 0; i < x; i++)
            for(int j = 0; j < y; j++) {
                block[i][j].addActionListener(this);
                block[i][j].addMouseListener(this);
                jPanel1.add(block[i][j]);
            }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 369, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
        );

        jMenu1.setText("游戏");
        jMenu1.setFont(new java.awt.Font("新宋体", 0, 14));

        jMenuItem1.setText("定制游戏");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("说明");
        jMenu2.setFont(new java.awt.Font("新宋体", 0, 14));

        jMenuItem2.setText("帮助");
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("关于");
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        MyBlock m = (MyBlock) e.getSource();
        if(!m.getStatus()){
            //m.setVisible(false);
            jPanel1.remove(block[m.getXIndex()][m.getYIndex()]);
            int mineNum = checkMineNum(m.getXIndex(),m.getYIndex(),row,col,block);
            if(mineNum != 0) {
                JLabel jb = new JLabel("       " + mineNum);
                jPanel1.add(jb, row*m.getXIndex() + m.getYIndex());
                jPanel1.validate();
            } else {
                recursive(m.getXIndex(), m.getYIndex(), row, col);
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Game Over");
        //System.out.println("position" + m.getXIndex() + " " + m.getYIndex());
    }
    private int checkMineNum(int x, int y, int row, int col, MyBlock[][] block) {
        int total = 0;
        if( ((x-1)>=0) && ((y-1)>=0) ) {
            if(block[x-1][y-1].getStatus())
                total++;
        }
        if( (y-1)>=0 ) {
            if(block[x][y-1].getStatus())
                total++;
        }
        if( ((y-1)>=0) && ((x+1)<row)) {
            if(block[x+1][y-1].getStatus())
                total++;
        }
        if( x-1>=0 ) {
            if(block[x-1][y].getStatus())
                total++;
        }
        if( x+1<row ) {
            if(block[x+1][y].getStatus())
                total++;
        }
        if((x-1>=0) && (y+1<col)){
            if(block[x-1][y+1].getStatus())
                total++;
        }
        if(y+1<col){
            if(block[x][y+1].getStatus())
                total++;
        }
        if( (x+1<row) && (y+1)<col){
            if(block[x+1][y+1].getStatus())
                total++;
        }
        return total;
    }
    
    private void recursive(int x, int y, int row, int col) {
        block[x][y].isVisited = true;
        if(block[x][y].getStatus())
            return;
        JLabel jb = new JLabel("      /");
        jPanel1.remove(block[x][y]);
        jPanel1.add(jb, row*block[x][y].getXIndex() + block[x][y].getYIndex());
        jPanel1.validate();
        if( ((x-1)>=0) && ((y-1)>=0) && (block[x-1][y-1].isVisited == false) && (checkMineNum(x-1, y-1, row, col, block)==0)) {
            recursive(x-1, y-1, row, col);
        }
        
        if( (y-1>=0) && (block[x][y-1].isVisited == false) && (checkMineNum(x, y-1, row, col, block)==0) ) {
            recursive(x, y-1, row, col);
        }
        
        if( ((y-1)>=0) && ((x+1)<row) && (block[x+1][y-1].isVisited==false) && (checkMineNum(x+1, y-1, row, col, block)==0)) {
            recursive(x+1, y-1, row, col);
        }
        
        if( (x-1>=0) && (block[x-1][y].isVisited==false) && (checkMineNum(x-1, y, row, col, block)==0) ) {
            recursive(x-1, y, row, col);
        }
        
        if( (x+1<row) && (block[x+1][y].isVisited==false) && (checkMineNum(x+1, y, row, col, block)==0) ) {
            recursive(x+1, y, row, col);
        }
        
        if((x-1>=0) && (y+1<col) && (block[x-1][y+1].isVisited==false) && (checkMineNum(x-1, y+1, row, col, block)==0)){
            recursive(x-1, y+1, row, col);
        }
        
        if( (y+1<col) && (block[x][y+1].isVisited == false) && (checkMineNum(x, y+1, row, col, block)==0)){
            recursive(x, y+1, row, col);
        }
        
        if( (x+1<row) && (y+1<col) && (block[x+1][y+1].isVisited == false) && (checkMineNum(x+1, y+1, row, col, block)==0)){
            recursive(x+1, y+1, row, col);
        }
    }

    public void mouseClicked(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
        
    }

    public void mousePressed(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
        System.out.println(e.getButton());
        if(e.getButton() == 3) {
            MyBlock m = (MyBlock) e.getSource();
            if(m.getText().equals("雷")){
                m.setText("");
            }
            else{
                m.setText("雷");
            }
        }
    }

    public void mouseEntered(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void mouseExited(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }
}
